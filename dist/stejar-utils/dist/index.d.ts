// Generated by dts-bundle v0.6.1

export function loadScript(url: string, timeout?: number): Promise<any>;

export enum PromiseStatus {
        RESOLVED,
        REJECTED,
}
export interface PromiseResult<T> {
        error: any;
        status: PromiseStatus;
        value: T;
}
export class PromiseService {
        /**
            * @param data
            * @returns {Promise<any>}
            */
        allSettled(...data: Promise<any>[]): Promise<PromiseResult<any>[]>;
        /**
            * @param promises
            * @returns {function(...[any]): any}
            */
        chain(promises: Function[]): (...args: any[]) => Promise<any>;
        /**
            * @param data
            * @returns {Promise<T>}
            */
        hashAll<T>(entry: {
                [key: string]: Promise<T>;
        }): {
                [key: string]: Promise<T>;
        };
        /**
            * @param data
            * @returns {Promise<T>}
            */
        hashSettled<T>(entry: {
                [key: string]: Promise<any>;
        }): Promise<T>;
        /**
            * @param timeout
            * @returns {Promise<any>}
            */
        delay(timeout: number): Promise<any>;
}

export class Observable<T> {
        /**
            * @type {Array}
            */
        protected listeners: Function[];
        /**
            * @param callback
            * @returns {()=>Function[]}
            */
        subscribe(callback: (value: T) => void): Function;
        /**
            * @param value
            * @returns {null}
            */
        protected onNext(value: T): void;
        /**
            * @returns {Observable}
            */
        asObservable(): Observable<T>;
}

export class Subject<T> extends Observable<T> {
        protected value: T;
        /**
            * @param value
            */
        constructor(value: T);
        /**
            * @param value
            */
        emit(value: T): void;
        /**
            * @param callback
            * @returns {Function}
            */
        subscribe(callback: (value: T) => void): Function;
        /**
            * @returns {T}
            */
        getValue(): T;
}

