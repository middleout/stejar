// // Generated by typings
// // Source: node_modules/stejar/src/Contracts/ReactRouter.d.ts
// declare namespace Router {
//
// 	interface RouteProps {
// 		middleware?: any;
// 	}
//
declare module "react-router" {
	export type RoutePattern = string;
	export type RouteComponents = { [key: string]: RouteComponent };
	export type Component = React.ReactType;
	export type RouteComponent = Component;
	export type Params = { [param: string]: string };
	export type RouteConfig = React.ReactNode | PlainRoute | PlainRoute[];
	import { LocationDescriptor, LocationState, Pathname, Path, Query } from "history";

	export interface RedirectFunction {
		( location: LocationDescriptor ): void;
		/**
		 * @deprecated `replaceState(state, pathname, query) is deprecated; Use `replace(location)` with a location descriptor instead. http://tiny.cc/router-isActivedeprecated
		 */
		( state: LocationState, pathname: Pathname | Path, query?: Query ): void;
	}

	export type EnterHook = ( nextState: RouterState, replace: RedirectFunction, callback?: Function ) => void;
	export type LeaveHook = () => void;
	export type ChangeHook = ( prevState: RouterState, nextState: RouterState, replace: RedirectFunction, callback: Function ) => void;
	export type RouteHook = ( nextLocation?: Location ) => any;

	export interface RouterState {
		location: Location;
		routes: PlainRoute[];
		params: Params;
		components: RouteComponent[];
	}

	interface RouteProps extends React.Props<Route> {
		middleware?: any;
		path?: RoutePattern;
		component?: RouteComponent;
		components?: RouteComponents;
		getComponent?: ( nextState: RouterState, cb: ( error: any, component?: RouteComponent ) => void ) => void
		getComponents?: ( nextState: RouterState, cb: ( error: any, components?: RouteComponents ) => void ) => void
		onEnter?: EnterHook;
		onLeave?: LeaveHook;
		onChange?: ChangeHook;
		getIndexRoute?: ( location: Location, cb: ( error: any, indexRoute: RouteConfig ) => void ) => void;
		getChildRoutes?: ( location: Location, cb: ( error: any, childRoutes: RouteConfig ) => void ) => void;
	}
	export interface PlainRoute {}

	interface IndexRedirect extends React.ComponentClass<any> {}
	export var IndexRedirect: IndexRedirect;

	interface IndexRoute extends React.ComponentClass<any> {}
	export var IndexRoute: IndexRoute;

	interface Route extends React.ComponentClass<RouteProps> {}
	export var Route: Route;
	interface InjectedRouter {
		push( ...args: any[] ): any;
	}
	export interface withRouter {
		( ...args: any[] ): any;
	}
	export var withRouter: withRouter;
	export interface Link extends React.ComponentClass<any> {}
	export var Link: Link;
	export interface RouterOnContext {}
	export interface Router extends React.ComponentClass<any> {}
	export var Router: Router;

	export function useRouterHistory( history: any ): any;

	export function applyRouterMiddleware( data: any ): any;
}
