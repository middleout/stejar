// Generated by dts-bundle v0.6.1
// Dependencies for this module:
//   ../@stejar/redux
//   ../reselect

import { ReducerStore } from "@stejar/redux";
import { Store } from "@stejar/redux";
import { Selector } from "reselect";

export interface AuthenticationAdapterContract<I> {
        /**
            * @returns {Promise<I>}
            */
        refreshIdentity(): Promise<I>;
        /**
            * @param data
            */
        authenticate<T>(data: T): Promise<I>;
        /**
            * @param data
            */
        logout(identity: I): Promise<boolean>;
}

export class AuthenticatedAction<I> {
    identity: I;
    /**
      * @param identity
      */
    constructor(identity: I);
}

export class LoggedOutAction {
}

export class AuthenticationStore<I> extends ReducerStore<{
        AuthenticationStore: I;
}> {
        /**
            * @constructor
            */
        constructor();
        /**
            * @param state
            * @param payload
            * @returns {{}&U&AppConfig}
            */
        protected authenticated(state: any, payload: AuthenticatedAction<I>): any;
        /**
            * @param state
            * @param payload
            * @returns {{}&U&AppConfig}
            */
        protected loggedOut(state: any, payload: LoggedOutAction): null;
        /**
            * @returns {boolean}
            */
        hasIdentity(): boolean;
        /**
            * @returns {I}
            */
        getIdentity(): I;
}

export class AuthenticationService<I> {
        protected store: Store<any>;
        protected authenticationAdapter: AuthenticationAdapterContract<I>;
        /**
            * @param store
            * @param authenticationAdapter
            */
        constructor(store: Store<any>, authenticationAdapter: AuthenticationAdapterContract<I>);
        /**
            * @returns {AuthenticationAdapterContract<I>}
            */
        getAdapter(): AuthenticationAdapterContract<I>;
        /**
            * @returns {Promise<boolean>}
            */
        refreshIdentity(): Promise<boolean>;
        /**
            * @param data
            * @returns {Promise<boolean>}
            */
        authenticate<T>(data?: T): Promise<boolean>;
        /**
            * @returns {Promise<boolean>}
            */
        logout(): Promise<boolean>;
}

export class AuthenticationQueries {
        /**
            * @type {Reselect.Selector<TInput, boolean>}
            */
        static hasIdentity: Selector<any, boolean>;
        /**
            * @type {Reselect.Selector<TInput, I>}
            */
        static getIdentity: <I>(state: any, props?: any) => I;
}

