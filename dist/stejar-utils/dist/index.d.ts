// Generated by dts-bundle v0.6.1

export function loadScript(url: string, timeout?: number): Promise<any>;

/**
    * @param url
    * @returns {Promise<T>}
    */
export function loadImage(url: string): Promise<string>;
/**
    * @param url
    * @returns {Promise<T>}
    */
export function loadImages(urls: string[]): Promise<string[]>;

export enum PromiseStatus {
        RESOLVED,
        REJECTED,
}
export interface PromiseResult<T> {
        error: any;
        status: PromiseStatus;
        value: T;
}
export class PromiseService {
        /**
            * @param data
            * @returns {Promise<any>}
            */
        allSettled(...data: Promise<any>[]): Promise<PromiseResult<any>[]>;
        /**
            * @param promises
            * @returns {function(...[any]): any}
            */
        chain(promises: Function[]): (...args: any[]) => Promise<any>;
        /**
            * @param data
            * @returns {Promise<T>}
            */
        hashAll<T>(entry: {
                [key: string]: Promise<T>;
        }): {
                [key: string]: Promise<T>;
        };
        /**
            * @param data
            * @returns {Promise<T>}
            */
        hashSettled<T>(entry: {
                [key: string]: Promise<any>;
        }): Promise<T>;
        /**
            * @param timeout
            * @returns {Promise<any>}
            */
        delay(timeout: number): Promise<any>;
}

export class Observable<T> {
        /**
            * @type {Array}
            */
        protected listeners: Function[];
        /**
            * @param callback
            * @returns {()=>Function[]}
            */
        subscribe(callback: (value: T) => void): Function;
        /**
            * @param value
            * @returns {null}
            */
        protected onNext(value: T): void;
        /**
            * @returns {Observable}
            */
        asObservable(): Observable<T>;
}

export class Subject<T> extends Observable<T> {
        protected value: T;
        /**
            * @param value
            */
        constructor(value: T);
        /**
            * @param value
            */
        next(value: T): void;
        /**
            * @param callback
            * @returns {Function}
            */
        subscribe(callback: (value: T) => void): Function;
        /**
            * @returns {T}
            */
        getValue(): T;
}

/**
    * @param topic
    * @param payload
    * @param origin
    * @param target
    */
export function postMessage(topic: string, payload?: any, origin?: string, target?: Window): void;
/**
    * @param topic
    * @param callback
    * @returns {(event:{data: {topic: any, payload: any}})=>undefined}
    */
export function addCrossDomainEventListener(topic: string, callback: Function): Function;
/**
    * @param listener
    */
export function removeCrossDomainEventListener(listener: Function): void;
export class Channel {
        protected debug: boolean;
        protected debugListenres: Function[];
        /**
            * @param origin
            * @param target
            * @param debug
            */
        constructor(origin: string, target?: Window, debug?: boolean);
        /**
            * @param topic
            * @param callback
            * @returns {Function}
            */
        subscribe(topic: string, callback: Function): Function;
        /**
            * @param listener
            */
        unsuscribe(listener: Function): void;
        /**
            * @param topic
            * @param payload
            */
        send(topic: string, payload?: any): void;
}

export function popupWindow(url: string, title?: string, width?: number, height?: number): void;

