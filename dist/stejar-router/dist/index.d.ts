// Generated by dts-bundle v0.6.1
// Dependencies for this module:
//   ../react
//   ../react-router

import { Component, HTMLAttributes } from "react";
import { RouterOnContext } from "react-router";
import { InjectedRouter } from "react-router";
import { Route } from "react-router";
import { PlainRoute } from "react-router";

export interface LinkProps extends HTMLAttributes<any> {
    to?: {
        name?: string;
        params?: Object;
        query?: Object;
    } | string;
    router?: RouterOnContext;
    routes?: any[];
    params?: Object;
}
export class Link extends Component<LinkProps, {}> {
    render(): JSX.Element;
}

export function onEnterSync(resolve: Function): (a: Object, b: Function, c: Function) => Promise<void>;
export function onChangeSync(resolve: Function): (a: Object, b: Object, c: Function, d: Function) => Promise<void>;

export interface WithRouterProps<P, Q> {
    router?: InjectedRouter & {
        push(options: {
            name?: string;
            params?: Object;
            query?: Object;
        }): void;
    };
    params?: P;
    location?: {
        query: Q;
    };
    routes?: {
        name?: string;
        component?: any;
    }[];
}
export function withRouter(WrappedComponent: any): any;

export function getRouteName(routes: any[]): string;

export class MiddlewareRoute extends Route {
    /**
      * @param route
      * @returns {any}
      */
    static createRouteFromReactElement(route: any): any;
}

export interface RouteWithName extends PlainRoute {
        name?: string;
}
export interface RouterStateContract<P, Q> {
        routes: RouteWithName[];
        params: P;
        location: {
                query: Q;
        };
}
export interface RedirectorContract {
        (options: {
                name?: string;
                params?: Object;
                query?: Object;
        }): void;
}
export interface AbstractMiddlewareRoute {
        /**
            * @param toState
            * @param redirector
            */
        onEnter?<P, Q>(toState: RouterStateContract<P, Q>, redirector: RedirectorContract): Promise<any>;
        /**
            * @param fromState
            * @param toState
            * @param redirector
            */
        onChange?<P, Q>(fromState: RouterStateContract<P, Q>, toState: RouterStateContract<P, Q>, redirector: RedirectorContract): Promise<any>;
}

